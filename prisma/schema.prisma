// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enhanced User model for Godsend platform
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Hashed password for credentials authentication
  
  // Godsend-specific fields
  phone         String?
  location      String?   // Current city in Country B
  homeCountry   String?   // Country A
  isVerified    Boolean   @default(false)
  rating        Decimal?  @db.Decimal(3,2) // Average rating (0.00-5.00)
  totalDeliveries Int     @default(0)
  totalRequests  Int      @default(0)
  bio           String?   @db.Text
  preferences   Json?     // User preferences as JSON
  
  // NextAuth relationships
  accounts      Account[]
  sessions      Session[]
  
  // Godsend relationships
  requests      Request[] @relation("UserRequests")     // Requests created by user
  fulfillments  Request[] @relation("UserFulfillments") // Requests fulfilled by user
  messages      Message[] // Messages sent by user
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Godsend Platform Models
model Request {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String   // Food, Medicine, Clothing, Electronics, Books, Other
  quantity    Int
  estimatedValue Decimal? @db.Decimal(10,2)
  
  // Source location (Country A)
  sourceCity  String
  sourceShop  String?
  sourceAddress String?
  alternativeSource String?
  
  // Delivery location (Country B)
  deliveryCity String
  meetupArea   String?
  dueDate      DateTime
  
  // Status tracking
  status       RequestStatus @default(OPEN)
  
  // Relationships
  requesterId  String
  requester    User     @relation("UserRequests", fields: [requesterId], references: [id])
  fulfillerId  String?
  fulfiller    User?    @relation("UserFulfillments", fields: [fulfillerId], references: [id])
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Optional: Messages between users
  messages     Message[]

  // Indexes for better performance
  @@index([status])
  @@index([category])
  @@index([deliveryCity])
  @@index([createdAt])
  @@index([requesterId])
  @@index([fulfillerId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  requestId String
  request   Request  @relation(fields: [requestId], references: [id])
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  createdAt DateTime @default(now())
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
